{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "ARMenu Apis",
    "description": "ARMenu API",
    "contact": {
      "name": "API Support",
      "email": ""
    }
  },
  "host": "localhost:5000",
  "basePath": "/",
  "tags": [
    {
      "name": "ARMenu CRUD",
      "description": "ARMenu related apis"
    },
    {
      "name": "ARMenu",
      "description": "ARMenu App"
    }
  ],
  "schemes": [
    "http"
  ],
  "securityDefinitions": {},
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/api/categories/": {
      "get": {
        "tags": [
          "Categories"
        ],
        "description": "",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "Categories"
        ],
        "description": "",
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/api/categories/{id}": {
      "get": {
        "tags": [
          "Categories"
        ],
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "put": {
        "tags": [
          "Categories"
        ],
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Update category.",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "Pizza"
                },
                "description": {
                  "type": "string",
                  "example": "Pizza category"
                }
              },
              "required": [
                "name",
                "description"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        }
      },
      "delete": {
        "tags": [
          "Categories"
        ],
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/api/food/": {
      "get": {
        "tags": [
          "Food"
        ],
        "description": "",
        "responses": {
          "default": {
            "description": ""
          }
        }
      },
      "post": {
        "tags": [
          "Food"
        ],
        "description": "",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Add new food.",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "Pizza Alla Carbonara"
                },
                "ingredients": {
                  "type": "array",
                  "example": [
                    "Pancetta",
                    "Eggs",
                    "Parmesan",
                    "Bucatini"
                  ],
                  "items": {
                    "type": "string"
                  }
                },
                "price": {
                  "type": "number",
                  "example": 10
                },
                "is_vegetarian": {
                  "type": "boolean",
                  "example": false
                },
                "is_gluten_free": {
                  "type": "boolean",
                  "example": false
                },
                "description": {
                  "type": "string",
                  "example": "Rome’s classic creamy, indulgent pasta dish."
                },
                "image_url": {
                  "type": "string",
                  "example": "image url"
                },
                "model_url": {
                  "type": "string",
                  "example": "model url"
                }
              },
              "required": [
                "name",
                "ingredients",
                "price",
                "is_vegetarian",
                "is_gluten_free",
                "description",
                "image_url",
                "model_url"
              ]
            }
          }
        ],
        "responses": {
          "default": {
            "description": ""
          }
        }
      }
    },
    "/api/food/{id}": {
      "get": {
        "tags": [
          "Food"
        ],
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": ""
          }
        }
      },
      "put": {
        "tags": [
          "Food"
        ],
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Update food.",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "Pizza Alla Carbonara"
                },
                "ingredients": {
                  "type": "array",
                  "example": [
                    "Bacon",
                    "Eggs",
                    "Mozzarella"
                  ],
                  "items": {
                    "type": "string"
                  }
                },
                "price": {
                  "type": "number",
                  "example": 8
                },
                "is_vegetarian": {
                  "type": "boolean",
                  "example": false
                },
                "is_gluten_free": {
                  "type": "boolean",
                  "example": false
                },
                "description": {
                  "type": "string",
                  "example": "Rome’s classic creamy, indulgent pasta dish."
                },
                "image_url": {
                  "type": "string",
                  "example": "image url"
                },
                "model_url": {
                  "type": "string",
                  "example": "model url"
                }
              },
              "required": [
                "name",
                "ingredients",
                "price",
                "is_vegetarian",
                "is_gluten_free",
                "description",
                "image_url",
                "model_url"
              ]
            }
          }
        ],
        "responses": {
          "default": {
            "description": ""
          }
        }
      },
      "delete": {
        "tags": [
          "Food"
        ],
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": ""
          }
        }
      }
    },
    "/api/users/": {
      "get": {
        "tags": [
          "Users"
        ],
        "description": "",
        "responses": {
          "default": {
            "description": ""
          }
        }
      },
      "post": {
        "tags": [
          "Users"
        ],
        "description": "",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Add new user.",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "John Doe"
                },
                "email": {
                  "type": "string",
                  "example": "john.doe@gmail.com"
                },
                "password": {
                  "type": "string",
                  "example": "12345678"
                },
                "userGroup": {
                  "type": "string",
                  "example": "usergroupId"
                }
              },
              "required": [
                "name",
                "email",
                "password",
                "userGroup"
              ]
            }
          }
        ],
        "responses": {
          "default": {
            "description": ""
          }
        }
      }
    },
    "/api/users/{id}": {
      "get": {
        "tags": [
          "Users"
        ],
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": ""
          }
        }
      },
      "put": {
        "tags": [
          "Users"
        ],
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Update user.",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "Jane Doe"
                },
                "email": {
                  "type": "string",
                  "example": "jane.doe@gmail.com"
                },
                "password": {
                  "type": "string",
                  "example": "87654321"
                },
                "userGroup": {
                  "type": "string",
                  "example": "usergroupId"
                }
              },
              "required": [
                "name",
                "email",
                "password",
                "userGroup"
              ]
            }
          }
        ],
        "responses": {
          "default": {
            "description": ""
          }
        }
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": ""
          }
        }
      }
    },
    "/api/userGroups/": {
      "get": {
        "tags": [
          "User Groups"
        ],
        "description": "",
        "responses": {
          "default": {
            "description": ""
          }
        }
      },
      "post": {
        "tags": [
          "User Groups"
        ],
        "description": "",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Add new user group.",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "Viewer"
                },
                "privileges": {
                  "type": "object",
                  "properties": {
                    "canManageFood": {
                      "type": "boolean",
                      "example": false
                    },
                    "canManageCategory": {
                      "type": "boolean",
                      "example": false
                    },
                    "canManageUsers": {
                      "type": "boolean",
                      "example": false
                    },
                    "canManageUserGroups": {
                      "type": "boolean",
                      "example": false
                    }
                  }
                }
              },
              "required": [
                "name",
                "privileges"
              ]
            }
          }
        ],
        "responses": {
          "default": {
            "description": ""
          }
        }
      }
    },
    "/api/userGroups/{id}": {
      "get": {
        "tags": [
          "User Groups"
        ],
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": ""
          }
        }
      },
      "put": {
        "tags": [
          "User Groups"
        ],
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Update user group.",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "Editor"
                },
                "privileges": {
                  "type": "object",
                  "properties": {
                    "canManageFood": {
                      "type": "boolean",
                      "example": true
                    },
                    "canManageCategory": {
                      "type": "boolean",
                      "example": true
                    },
                    "canManageUsers": {
                      "type": "boolean",
                      "example": false
                    },
                    "canManageUserGroups": {
                      "type": "boolean",
                      "example": false
                    }
                  }
                }
              },
              "required": [
                "name",
                "privileges"
              ]
            }
          }
        ],
        "responses": {
          "default": {
            "description": ""
          }
        }
      },
      "delete": {
        "tags": [
          "User Groups"
        ],
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": ""
          }
        }
      }
    }
  },
  "definitions": {
    "todoResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "number",
          "example": 200
        },
        "message": {
          "type": "string",
          "example": "Success"
        }
      }
    },
    "errorResponse.400": {
      "type": "object",
      "properties": {
        "code": {
          "type": "number",
          "example": 400
        },
        "message": {
          "type": "string",
          "example": "The request was malformed or invalid. Please check the request parameters."
        }
      }
    },
    "errorResponse.401": {
      "type": "object",
      "properties": {
        "code": {
          "type": "number",
          "example": 401
        },
        "message": {
          "type": "string",
          "example": "Authentication failed or user lacks proper authorization."
        }
      }
    },
    "errorResponse.403": {
      "type": "object",
      "properties": {
        "code": {
          "type": "number",
          "example": 403
        },
        "message": {
          "type": "string",
          "example": "You do not have permission to access this resource."
        }
      }
    },
    "errorResponse.404": {
      "type": "object",
      "properties": {
        "code": {
          "type": "number",
          "example": 404
        },
        "message": {
          "type": "string",
          "example": "The requested resource could not be found on the server."
        }
      }
    },
    "errorResponse.500": {
      "type": "object",
      "properties": {
        "code": {
          "type": "number",
          "example": 500
        },
        "message": {
          "type": "string",
          "example": "An unexpected error occurred on the server. Please try again later."
        }
      }
    }
  }
}